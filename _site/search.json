[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1 : Singapore Residents by Planning Area/Subzone, Single Year of Age and Sex, June 2024",
    "section": "",
    "text": "1. Overview\n\n1.1 Setting the Scene\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024. Singapore’s population landscape is constantly evolving due to demographic shifts such as aging, fertility trends, and migration. Understanding the distribution of residents by age, gender, and location is crucial for informed urban planning, resource allocation, and policy formulation. This exercise aims to visualise the 2024 demographic structure and spatial distribution of Singapore residents across planning areas and subzones. Through visual analytics, we seek to uncover meaningful patterns and insights that support public awareness and strategic decision-making.\n\n\n1.2 Task and Objective\nAssuming the role of the graphical editor of the media company, our tasked to prepare at most three data visualisation for the article. The objective of this analysis is to uncover regional population patterns and age composition trends across planning areas in 2024 using visual analytics. Specifically, we aim to:\n\nIdentify age concentrations across planning areas via a heatmap.\nExplore regional disparities in age distribution using boxplots.\nExamine population ageing and youth dependency dynamics through bubble charts.\n\nThese insights will help policymakers and urban planners to design age-targeted strategies that align with the demographic characteristics of each region.\n\n\n1.3 Data Description\nThe dataset used in this study is sourced from the Singapore Department of Statistics and titled “Singapore Residents by Planning Area/Subzone, Single Year of Age and Sex, June 2024.” It contains information on resident population counts broken down by:\n\nPA —&gt; Planning Area\nSZ —&gt; Subzone\nPop —&gt; Population\nAge\nSex ––&gt; Male or Female\nTime ––&gt; Year of data (2024)\n\n\n\n2. Getting Started\n\n\n2.1 Data Loading\nWe begin by loading the necessary libraries using the pacman package to ensure all required functions are available.\n\ntidyverse: Data manipulation and visualization\npatchwork: Combining multiple plots if needed\nhrbrthemes: Clean and minimal visual themes\nggrepel: Prevent overlapping text labels\nHmisc: Weighted quantile calculations (for boxplot annotations)\n\n\n\nClick to view code\npacman::p_load(tidyverse, patchwork, hrbrthemes, ggrepel, Hmisc)\n\n\n\n\n2.2 Data Import\nNext, we import the main dataset using read_csv(). Since the analysis focuses on the year 2024, we filter accordingly.\n\nexam_data &lt;- read_csv(\"data/data.csv\")\n\n\n\n2.3 Data Cleaning\nThe cleaning process involves:\n\nFiltering records to only include Time == 2024.\nHandle Missing value\nGlimpse of data\n\nConverting the Age field:\n\nAny age label containing “100” (e.g., “100+”) is converted to numeric 100.\nAge labels containing “90” (e.g., “90+” or “90_and_over”) are converted to numeric 90.\nAll other age values are converted to numeric as-is.\n\nRemoving rows where the age conversion fails.\n\n\nClick to view code\nclean_data &lt;- exam_data %&gt;%\n  filter(Time == 2024) %&gt;%\n  mutate(\n    Age_num = case_when(\n      str_detect(Age, \"100\") ~ 100,\n      str_detect(Age, \"90\") ~ 90,\n      str_detect(Age, \"^\\\\d+$\") ~ as.numeric(Age),\n      TRUE ~ NA_real_\n    )\n  ) %&gt;%\n  filter(!is.na(Age_num))\n\n\nAdditionally, we standardize age group classification (Youth: ≤19; Working: 20–64; Elderly: ≥65) for later segmentation.\n\nCheck duplicates\n\n\nexam_data %&gt;%\n  duplicated() %&gt;%\n  sum()  # returns number of duplicate rows\n\n[1] 0\n\nexam_data &lt;- exam_data %&gt;%\n  distinct()\n\n\nCheck Missing value\n\n\nsummary(exam_data)\n\n      PA                 SZ                Age                Sex           \n Length:60424       Length:60424       Length:60424       Length:60424      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      Pop              Time     \n Min.   :   0.0   Min.   :2024  \n 1st Qu.:   0.0   1st Qu.:2024  \n Median :  20.0   Median :2024  \n Mean   :  69.4   Mean   :2024  \n 3rd Qu.:  90.0   3rd Qu.:2024  \n Max.   :1180.0   Max.   :2024  \n\ncolSums(is.na(exam_data))\n\n  PA   SZ  Age  Sex  Pop Time \n   0    0    0    0    0    0 \n\n\n\n\n\nGlimpse of data\n\nstr(exam_data)\n\ntibble [60,424 × 6] (S3: tbl_df/tbl/data.frame)\n $ PA  : chr [1:60424] \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ  : chr [1:60424] \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" ...\n $ Age : chr [1:60424] \"0\" \"0\" \"1\" \"1\" ...\n $ Sex : chr [1:60424] \"Males\" \"Females\" \"Males\" \"Females\" ...\n $ Pop : num [1:60424] 10 10 10 10 10 10 10 10 30 10 ...\n $ Time: num [1:60424] 2024 2024 2024 2024 2024 ...\n\nglimpse(exam_data)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n3. Exploratory Visual Analysis\n\n\nEDA 1: Heatmap of Population by Age and Planning Area (2024)\nThis heatmap visualizes the total population across different planning areas in Singapore by age. Each row represents a single age (e.g., 0 to 100), and each column corresponds to a planning area. The intensity of color indicates the number of residents in a specific age group within each planning area. Darker shades represent higher population counts, allowing for easy visual comparison of population structure across locations.\nThe data was pre-aggregated using group_by(PA, Age_num) and summarise(TotalPop = sum(Pop)) to obtain total population per age and area combination.\n\nHeatmapcode\n\n\n\n\n\n\n\n\n\n\nheatmap_df &lt;- clean_data %&gt;%\n  group_by(PA, Age_num) %&gt;%\n  summarise(TotalPop = sum(Pop), .groups = \"drop\")\n\nggplot(heatmap_df, aes(x = reorder(PA, -TotalPop), y = Age_num, fill = TotalPop)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"#f2f0f7\", high = \"#54278f\", name = \"Population\") +\n  labs(\n    title = \"Heatmap of Population by Age and Planning Area (2024)\",\n    x = \"Planning Area\",\n    y = \"Age\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\nInsight\n\n\n\nThe heatmap reveals that younger populations (ages 0–19) are more prevalent in towns like Punggol, Sengkang, and Jurong West, which are known for newer housing developments. In contrast, older populations (ages 65 and above) are concentrated in mature estates such as Toa Payoh, Bukit Merah, and Queenstown. These demographic patterns can guide resource allocation for education (schools, childcare) and healthcare (eldercare services) based on age concentrations in each area.\n\n\n\n\nEDA 2: Boxplot of Age Distribution by Region\nThis boxplot displays the age distribution of residents across selected regions in Singapore. Each box represents the interquartile range (IQR) — the middle 50% of the population — while the horizontal line inside the box indicates the median age. The whiskers extend to the lowest and highest non-outlier values, and outliers beyond these are also shown.\nTo account for differences in population size, the plot is weighted by the population count (Pop). Weighted quartiles (Q1, Median, Q3) were computed using the Hmisc::wtd.quantile() function and annotated on the plot for clearer interpretation.\n\nBoxplotCode\n\n\n\n\n\n\n\n\n\n\nbox_df &lt;- clean_data %&gt;%\n  inner_join(region_map, by = \"PA\") %&gt;%\n  mutate(\n    Age_num = case_when(\n      str_detect(Age, \"100\") ~ 100,\n      str_detect(Age, \"90\") ~ 90,\n      str_detect(Age, \"^\\\\d+$\") ~ as.numeric(Age),\n      TRUE ~ NA_real_\n    )\n  ) %&gt;%\n  filter(!is.na(Age_num))\n\nquartiles_df &lt;- box_df %&gt;%\n  group_by(Region) %&gt;%\n  summarise(\n    Q1 = wtd.quantile(Age_num, weights = Pop, probs = 0.25, na.rm = TRUE),\n    Median = wtd.quantile(Age_num, weights = Pop, probs = 0.5, na.rm = TRUE),\n    Q3 = wtd.quantile(Age_num, weights = Pop, probs = 0.75, na.rm = TRUE)\n  )\n\nggplot(box_df, aes(x = Region, y = Age_num)) +\n  geom_boxplot(aes(weight = Pop), fill = \"#FDC086\", color = \"#E07B39\") +\n  geom_text(data = quartiles_df, aes(x = Region, y = Q1, label = paste0(\"Q1: \", round(Q1))), \n            vjust = -1.5, size = 3) +\n  geom_text(data = quartiles_df, aes(x = Region, y = Median, label = paste0(\"Median: \", round(Median))), \n            vjust = -0.2, size = 3, fontface = \"bold\") +\n  geom_text(data = quartiles_df, aes(x = Region, y = Q3, label = paste0(\"Q3: \", round(Q3))), \n            vjust = 1.5, size = 3) +\n  labs(\n    title = \"Boxplot of Age Distribution by Region\",\n    x = \"Region\",\n    y = \"Age\"\n  ) +\n  theme_minimal(base_size = 12)\n\n\n\n\n\n\n\n\n\n\nInsight\n\n\n\nThe Central region shows the widest IQR and highest median age, suggesting a concentration of older residents in mature housing estates like Toa Payoh and Queenstown. In contrast, the East and North-East regions have narrower boxes and lower medians, indicating a younger demographic — likely linked to newer developments attracting young families. Outliers at the upper end of most regions reflect the presence of aging residents across the country, though at different levels of intensity.\n\n\n\n\nEDA 3: Ageing Index vs Youth Dependency Ratio by Planning Area (2024)\nThis bubble chart visualizes the demographic balance of Singapore’s planning areas by comparing two key ratios:\n\nAgeing Index (vertical axis): Elderly population relative to youth\nYouth Dependency Ratio (horizontal axis): Youth population relative to working-age adults\n\nEach bubble represents a planning area. Its position indicates the ageing structure, while the color reflects total population tier (Low, Medium, High). Bubble size corresponds to the total population, providing an additional layer of magnitude.\nThe chart highlights regional disparities in demographic pressures. This type of visual is particularly useful for public policy makers to simultaneously assess youth dependency and ageing pressure across local areas.\n\nBubble ChartCode\n\n\n\n\n\n\n\n\n\n\nageing_df &lt;- clean_data %&gt;%\n  mutate(\n    Age_num = case_when(\n      str_detect(Age, \"100\") ~ 100,\n      str_detect(Age, \"90\") ~ 90,\n      str_detect(Age, \"^\\\\d+$\") ~ as.numeric(Age),\n      TRUE ~ NA_real_\n    ),\n    AgeGroup = case_when(\n      Age_num &lt;= 23 ~ \"Youth\",\n      Age_num &gt;= 65 ~ \"Elderly\",\n      TRUE ~ \"Working\"\n    )\n  ) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Population = sum(Pop), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = AgeGroup, values_from = Population, values_fill = 0) %&gt;%\n  mutate(\n    Ageing_Index = Elderly / Youth,\n    Youth_Dependency = Youth / Working,\n    TotalPop = Elderly + Youth + Working,\n    PopGroup = case_when(\n      TotalPop &gt;= 200000 ~ \"High\",\n      TotalPop &gt;= 100000 ~ \"Medium\",\n      TRUE ~ \"Low\"\n    )\n  )\n\nggplot(ageing_df, aes(x = Youth_Dependency, y = Ageing_Index, size = TotalPop, color = PopGroup, label = PA)) +\n  geom_point(alpha = 0.7) +\n  geom_text_repel(size = 3, max.overlaps = 12) +\n  scale_size(range = c(2, 12), guide = \"none\") +\n  scale_color_manual(values = c(\"Low\" = \"#66c2a5\", \"Medium\" = \"#fc8d62\", \"High\" = \"#8da0cb\")) +\n  labs(\n    title = \"Ageing Index vs Youth Dependency Ratio by Planning Area (2024)\",\n    x = \"Youth Dependency Ratio (Youth / Working Age)\",\n    y = \"Ageing Index (Elderly / Youth)\",\n    color = \"Population Tier\"\n  ) +\n  theme_minimal(base_size = 12)\n\n\n\n\n\n\n\n\n\n\nInsight\n\n\n\nMature estates such as Bukit Timah, Marine Parade, and Toa Payoh exhibit high ageing indices, suggesting a significant elderly population relative to youth. In contrast, towns like Punggol and Sengkang have low ageing indices but high youth dependency ratios, indicating a younger demographic with more children per working adult. Bubble sizes show that Bedok, Tampines, and Jurong West have among the largest populations, making them key zones for age-targeted service delivery. This dual-axis visual helps forecast public service needs — from eldercare to early childhood education — based on population structure.\n\n\n\n\n4. Summary\nThis visual analytics project explored the demographic structure of Singapore in 2024 using three key static visualisations:\n\nA heatmap revealed how different age groups are distributed across planning areas, clearly showing that newer towns like Punggol and Sengkang are home to younger populations, while mature estates such as Toa Payoh and Queenstown have a larger concentration of elderly residents.\nA boxplot, weighted by population, illustrated the age distribution within selected regions. Central regions showed higher medians and wider age spread, suggesting aging communities, while East and North-East regions indicated younger, more uniform age profiles.\nA bubble chart compared ageing index and youth dependency ratio across planning areas. This dual-axis view allowed identification of towns experiencing demographic pressure from either end of the age spectrum. Towns like Punggol have high youth dependency, whereas places like Bukit Timah and Marine Parade show high ageing indices.\n\nTogether, these visualisations offer valuable insight into Singapore’s age distribution at both regional and town levels. They inform decisions in areas such as urban planning, healthcare infrastructure, school allocation, and social service delivery — ensuring policies are targeted to meet the evolving needs of the population.\n\n\n5. References\nSingapore Residents by Planning Area/Subzone, Single Year of Age and Sex, June 2024.\nTake-home Exercise brief"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VISUAL ANALYTICS",
    "section": "",
    "text": "Welcome to my portfolio for the Visual Analytics and Applications course, taught by Prof. Kam Tin Seong. This website is a collection of exercises and assignments completed throughout the course."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2 :  2 Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "2.1 Overview\nIn this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package.\n\n\n\n2.2 Getting started\n\n\n2.2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\n\npacman::p_load(tidyverse, ggrepel, ggthemes, hrbrthemes, patchwork)\n\n\n\n2.2.2 Importing data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\n2.3 Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.  We simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n\n2.3.1 Working with ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n2.4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n\n2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "title": "Hands-on Exercise 3b : 4 Programming Animated Statistical Graphics with R",
    "section": "Overview",
    "text": "Overview\nIn this exercise I will learn\n\nhow to create animated data visualisation by using gganimate and plotly\nhow to reshape data by using tidyr\nhow to process, wrangle and transform data by using dplyr"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "title": "Hands-on Exercise 3b : 4 Programming Animated Statistical Graphics with R",
    "section": "Getting Started",
    "text": "Getting Started\n\nLoading libraries\n\n\nCode\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nImporting data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\n\n\nCode\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(all_of(col), as.factor)) %&gt;% \n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3b : 4 Programming Animated Statistical Graphics with R",
    "section": "Animated Data Visualisation: gganimate methods",
    "text": "Animated Data Visualisation: gganimate methods\ngganimate() provides a range of new grammar classes that can be added to the plot object in order to customise how it should animate by changing with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\nBuilding a static plot\nWe first build a static line chart showing the population for all countries in Asia for the year of 2020. .\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(filter(globalPop, Year == 2020, Continent == \"Asia\"), aes(x = reorder(Country, Population), y = Population)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = 'Population by Country in 2020', x = 'Country', y = 'Population')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3b : 4 Programming Animated Statistical Graphics with R",
    "section": "Animated Data Visualisation: plotly",
    "text": "Animated Data Visualisation: plotly\n\nBuilding an animated bubble plot: ggplotly() method\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ngg &lt;- ggplot(filter(globalPop, Continent == \"Asia\"),\n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') +\n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nBuilding an animated bubble plot: plot_ly() method\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "title": "Hands-on Exercise 3a : 3 Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "3.1 Learning Outcome\nIn this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n3.2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure. The code chunk below will be used to accomplish the task.\n\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n3.3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\n# install.packages(\"readxl\")\nlibrary(readxl)\nexam_data &lt;- read_excel(\"data/GlobalPopulation.xls\")\nstr(exam_data)\n\ntibble [6,204 × 6] (S3: tbl_df/tbl/data.frame)\n $ Country   : chr [1:6204] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ Year      : num [1:6204] 1996 1998 2000 2002 2004 ...\n $ Young     : num [1:6204] 83.6 84.1 84.6 85.1 84.5 84.3 84.1 83.7 82.9 82.1 ...\n $ Old       : num [1:6204] 4.5 4.5 4.5 4.5 4.5 4.6 4.6 4.6 4.6 4.7 ...\n $ Population: num [1:6204] 21560 22913 23898 25268 28514 ...\n $ Continent : chr [1:6204] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n\n\n\n\n3.4 Interactive Data Visualisation - ggiraph methods\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements. If it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\n\n3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n3.5 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\n3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_datatooltip &lt;- paste(\"Country = \", exam_data$Country,\n                          \"\\nPopulation = \", exam_data$Population)\n\np &lt;- ggplot(data = exam_data, aes(x = Continent)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_datatooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(ggobj = p)\n\n```"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-mappings",
    "title": "Hands-on Exercise 1 :  1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Aesthetic mappings",
    "text": "Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\n1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function). \nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n\n1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram()is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n1.7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n1.7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()   \n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n1.7.9 Geometric Objects: geom_point()\n_geom_point()- is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2"
  }
]